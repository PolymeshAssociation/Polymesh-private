version: 2.1
commands:
  setup-sccache:
    steps:
      - run:
          name: Setup sccache
          command: |
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="/usr/local/cargo/bin/sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="2G"' >> $BASH_ENV
            /usr/local/cargo/bin/sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: Show cache size
          command: /usr/local/cargo/bin/sccache -s
  save-sccache-cache:
    steps:
      - run:
          name: Show cache size
          command: /usr/local/cargo/bin/sccache -s
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-stable-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "/usr/local/cargo"
            - "~/.cache/sccache"
jobs:
  lint:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2023-12-11
    resource_class: small
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run: 
          name: Install cargo-fmt
          command: rustup component add rustfmt
      - run:
          name: Check formatting
          command: ./scripts/rustfmt.sh
      - run:
          name: Check runtime spec versions and polymesh crate version.
          command: ./scripts/check_spec_and_cargo_version.sh
  check-storage-version:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2023-12-11
    resource_class: small
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Check Storage versions
          command: ./scripts/check_storage_versions.sh
  build:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2023-12-11
    resource_class: xlarge
    environment:
      VERBOSE: "1"
      RUSTFLAGS: -D warnings
      RUSTC_WRAPPER: /usr/local/cargo/bin/sccache
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v7-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Build release
          command: cargo build --locked --release
          no_output_timeout: 30m
      - run:
          name: Create assets directory for releases
          command: mkdir ./assets
      - run:
          name: Copy binary to assets
          command: cp ./target/release/polymesh-private ./assets/polymesh-private
      - run:
          name: Copy wasm to assets
          command: cp ./target/release/wbuild/polymesh*/*wasm ./assets/
      - run:
          name: Copy docker files to assets
          command: cp -r ./.docker ./assets/
      - run:
          name: Copy script files to assets
          command: cp -r ./scripts ./assets/
      - run:
          name: Copy Cargo.toml files to assets
          command: cp ./Cargo.toml ./assets/
      - persist_to_workspace:
          root: ./assets
          paths:
              - .
      - save_cache:
          key: v7-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cache/sccache"
  benchmark-build:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2023-12-11
    resource_class: xlarge
    environment:
      VERBOSE: "1"
      RUSTFLAGS: -D warnings
      RUSTC_WRAPPER: /usr/local/cargo/bin/sccache
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v4-bench-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Build binary with runtime-benchmarks
          command: cargo build --locked --release --features=runtime-benchmarks,running-ci
          no_output_timeout: 30m
      - run:
          name: Rename the benchmarks binary.
          command: mv ./target/release/polymesh-private ./polymesh-private-benchmarks
      - persist_to_workspace:
          root: ./
          paths:
            - polymesh-private-benchmarks
      - save_cache:
          key: v4-bench-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cache/sccache"
  benchmark:
    docker:
      - image: debian:stable
    resource_class: small
    environment:
      VERBOSE: "1"
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run benchmarks
          command: ./polymesh-private-benchmarks benchmark pallet -p=* -e=* -r 1 -s 2 --execution wasm --wasm-execution compiled --db-cache 512 --heap-pages=4096
          no_output_timeout: 30m
  test:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2023-12-11
    resource_class: large
    environment:
      VERBOSE: "1"
      RUSTFLAGS: -D warnings
      RUSTC_WRAPPER: /usr/local/cargo/bin/sccache
      SKIP_WASM_BUILD: "1"
      RUST_BACKTRACE: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v12-test-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Tests
          command: >-
            cargo test
            --package polymesh-private-runtime-tests
          no_output_timeout: 30m
      - save_cache:
          key: v12-test-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cache/sccache"
  coverage:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2023-12-11
    resource_class: xlarge
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version | tee rust.version
      - restore_cache:
          keys:
            - v7-coverage-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Coverage
          command: bash ./scripts/coverage.sh
          no_output_timeout: 30m
      - save_cache:
          key: v7-coverage-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
  rust-integration-test:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2023-12-11
    resource_class: medium+
    environment:
      VERBOSE: "1"
      POLYMESH_URL: "ws://localhost:9944"
      DATABASE_URL: "accounts.db"
      RUSTFLAGS: -D warnings
    steps:
      - checkout
      - restore-sccache-cache
      - attach_workspace:
          at: ./target/release
      - run:
          name: run Polymesh dev chain node for integration tests
          command: >-
            ./target/release/polymesh-private --dev
              --no-mdns --no-prometheus --no-telemetry
              --pool-limit 100000
          background: true
      - run:
          name: Reset accounts db
          command: ./reset_db.sh
          working_directory: ./integration
      - run:
          name: Run polymesh-api integration tests.
          command: cargo test --locked
          working_directory: ./integration
          no_output_timeout: 30m
      - save-sccache-cache
  clippy:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2023-12-11
    resource_class: xlarge
    environment:
      VERBOSE: "1"
      SKIP_WASM_BUILD: "1"
    steps:
      - checkout
      - run:
          name: Install clippy
          command: rustup component add clippy
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v6-clippy-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: run clippy
          command: cargo clippy -- -A clippy::all -W clippy::complexity -W clippy::perf
          no_output_timeout: 30m
      - save_cache:
          key: v6-clippy-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
  build-docker-debian:
    environment:
      IMAGE_NAME: polymeshassociation/polymesh-private
    docker:
      - image: cimg/deploy:2023.12
    resource_class: small
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: |
          export VERSION=`./scripts/version.sh "$CIRCLE_BRANCH" "$CIRCLE_SHA1"`
          docker build -f ./.docker/Dockerfile.debian --tag $IMAGE_NAME:latest-$CIRCLE_BRANCH-debian --tag $IMAGE_NAME:$VERSION-$CIRCLE_BRANCH-debian .
          echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker push --all-tags $IMAGE_NAME

workflows:
  commit:
    jobs:
      - lint
      - check-storage-version
      - clippy
      - test
      - build
      - benchmark-build
      - coverage
      - rust-integration-test:
          requires:
            - build
      - benchmark:
          requires:
            - benchmark-build
      - build-docker-debian:
          context:
            - DockerHub
          requires:
            - build
          filters:
            branches:
              only:
                - develop
