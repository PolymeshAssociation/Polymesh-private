// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-25, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `Ubuntu-2204-jammy-amd64-base`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`

// Executed Command:
// ./target/release/polymesh-private
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_staking
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_staking::WeightInfo for SubstrateWeight {
    // Storage: Staking Bonded (r:1 w:1)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:1 w:1)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof Skipped: Staking CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Proof Skipped: Staking HistoryDepth (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Proof Skipped: Identity CurrentDid (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Payee (r:0 w:1)
    // Proof Skipped: Staking Payee (max_values: None, max_size: None, mode: Measured)
    fn bond() -> Weight {
        // Minimum execution time: 52_559 nanoseconds.
        Weight::from_ref_time(52_819_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Bonded (r:1 w:0)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:1 w:1)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Proof Skipped: Identity CurrentDid (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    fn bond_extra() -> Weight {
        // Minimum execution time: 49_483 nanoseconds.
        Weight::from_ref_time(50_845_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:1 w:1)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:1 w:0)
    // Proof Skipped: Staking Validators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof Skipped: Staking CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Proof Skipped: Identity CurrentDid (max_values: Some(1), max_size: None, mode: Measured)
    fn unbond() -> Weight {
        // Minimum execution time: 47_108 nanoseconds.
        Weight::from_ref_time(47_719_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:1 w:1)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof Skipped: Staking CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 100]`.
    fn withdraw_unbonded_update(s: u32) -> Weight {
        // Minimum execution time: 37_841 nanoseconds.
        Weight::from_ref_time(39_790_759)
            // Standard Error: 11_688
            .saturating_add(Weight::from_ref_time(25_211).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:1 w:1)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof Skipped: Staking CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Bonded (r:1 w:1)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking SlashingSpans (r:1 w:1)
    // Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:0 w:1)
    // Proof Skipped: Staking Validators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Payee (r:0 w:1)
    // Proof Skipped: Staking Payee (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Nominators (r:0 w:1)
    // Proof Skipped: Staking Nominators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking SpanSlash (r:0 w:99)
    // Proof Skipped: Staking SpanSlash (max_values: None, max_size: None, mode: Measured)
    /// The range of component `s` is `[0, 100]`.
    fn withdraw_unbonded_kill(s: u32) -> Weight {
        // Minimum execution time: 56_887 nanoseconds.
        Weight::from_ref_time(57_876_346)
            // Standard Error: 65_411
            .saturating_add(Weight::from_ref_time(1_715_284).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(8))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:1 w:0)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking MinimumBondThreshold (r:1 w:0)
    // Proof Skipped: Staking MinimumBondThreshold (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking ValidatorCommissionCap (r:1 w:0)
    // Proof Skipped: Staking ValidatorCommissionCap (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Validators (r:1 w:1)
    // Proof Skipped: Staking Validators (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity AccountKeyRefCount (r:1 w:1)
    // Proof Skipped: Identity AccountKeyRefCount (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Nominators (r:0 w:1)
    // Proof Skipped: Staking Nominators (max_values: None, max_size: None, mode: Measured)
    fn validate() -> Weight {
        // Minimum execution time: 45_415 nanoseconds.
        Weight::from_ref_time(46_036_000)
            .saturating_add(DbWeight::get().reads(8))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Staking MinimumBondThreshold (r:0 w:1)
    // Proof Skipped: Staking MinimumBondThreshold (max_values: Some(1), max_size: None, mode: Measured)
    fn set_min_bond_threshold() -> Weight {
        // Minimum execution time: 8_206 nanoseconds.
        Weight::from_ref_time(8_346_000).saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Proof Skipped: Instance2Group ActiveMembers (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Identity Claims (r:2 w:0)
    // Proof Skipped: Identity Claims (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Proof Skipped: Staking ValidatorCount (max_values: Some(1), max_size: None, mode: Measured)
    fn add_permissioned_validator() -> Weight {
        // Minimum execution time: 35_677 nanoseconds.
        Weight::from_ref_time(35_837_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    fn remove_permissioned_validator() -> Weight {
        // Minimum execution time: 18_816 nanoseconds.
        Weight::from_ref_time(19_717_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ValidatorCommissionCap (r:1 w:1)
    // Proof Skipped: Staking ValidatorCommissionCap (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Validators (r:152 w:151)
    // Proof Skipped: Staking Validators (max_values: None, max_size: None, mode: Measured)
    /// The range of component `m` is `[0, 150]`.
    fn set_commission_cap(m: u32) -> Weight {
        // Minimum execution time: 22_072 nanoseconds.
        Weight::from_ref_time(23_338_011)
            // Standard Error: 23_481
            .saturating_add(Weight::from_ref_time(3_807_937).saturating_mul(m.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(m.into())))
            .saturating_add(DbWeight::get().writes(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(m.into())))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:1 w:0)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Nominators (r:1 w:1)
    // Proof Skipped: Staking Nominators (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Proof Skipped: Instance2Group ActiveMembers (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Identity Claims (r:2 w:0)
    // Proof Skipped: Identity Claims (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:17 w:1)
    // Proof Skipped: Staking Validators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof Skipped: Staking CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `n` is `[1, 16]`.
    fn nominate(n: u32) -> Weight {
        // Minimum execution time: 59_642 nanoseconds.
        Weight::from_ref_time(55_291_662)
            // Standard Error: 26_306
            .saturating_add(Weight::from_ref_time(3_136_120).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(10))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:1 w:0)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:1 w:1)
    // Proof Skipped: Staking Validators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Nominators (r:0 w:1)
    // Proof Skipped: Staking Nominators (max_values: None, max_size: None, mode: Measured)
    fn chill() -> Weight {
        // Minimum execution time: 20_929 nanoseconds.
        Weight::from_ref_time(21_270_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Staking Ledger (r:1 w:0)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Payee (r:0 w:1)
    // Proof Skipped: Staking Payee (max_values: None, max_size: None, mode: Measured)
    fn set_payee() -> Weight {
        // Minimum execution time: 14_538 nanoseconds.
        Weight::from_ref_time(14_848_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking Bonded (r:1 w:1)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:2 w:2)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    fn set_controller() -> Weight {
        // Minimum execution time: 22_882 nanoseconds.
        Weight::from_ref_time(23_224_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking ValidatorCount (r:0 w:1)
    // Proof Skipped: Staking ValidatorCount (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `c` is `[0, 1000]`.
    fn set_validator_count(c: u32) -> Weight {
        // Minimum execution time: 3_276 nanoseconds.
        Weight::from_ref_time(3_780_246)
            // Standard Error: 266
            .saturating_add(Weight::from_ref_time(867).saturating_mul(c.into()))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    // Proof Skipped: Staking ForceEra (max_values: Some(1), max_size: None, mode: Measured)
    fn force_no_eras() -> Weight {
        // Minimum execution time: 3_447 nanoseconds.
        Weight::from_ref_time(3_597_000).saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    // Proof Skipped: Staking ForceEra (max_values: Some(1), max_size: None, mode: Measured)
    fn force_new_era() -> Weight {
        // Minimum execution time: 3_336 nanoseconds.
        Weight::from_ref_time(3_417_000).saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    // Proof Skipped: Staking ForceEra (max_values: Some(1), max_size: None, mode: Measured)
    fn force_new_era_always() -> Weight {
        // Minimum execution time: 3_316 nanoseconds.
        Weight::from_ref_time(3_436_000).saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking Invulnerables (r:0 w:1)
    // Proof Skipped: Staking Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `v` is `[0, 1000]`.
    fn set_invulnerables(v: u32) -> Weight {
        // Minimum execution time: 3_617 nanoseconds.
        Weight::from_ref_time(4_296_839)
            // Standard Error: 262
            .saturating_add(Weight::from_ref_time(5_710).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking Bonded (r:1 w:1)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking SlashingSpans (r:1 w:1)
    // Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:0 w:1)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:0 w:1)
    // Proof Skipped: Staking Validators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Payee (r:0 w:1)
    // Proof Skipped: Staking Payee (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Nominators (r:0 w:1)
    // Proof Skipped: Staking Nominators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking SpanSlash (r:0 w:99)
    // Proof Skipped: Staking SpanSlash (max_values: None, max_size: None, mode: Measured)
    /// The range of component `s` is `[0, 100]`.
    fn force_unstake(s: u32) -> Weight {
        // Minimum execution time: 35_276 nanoseconds.
        Weight::from_ref_time(40_307_207)
            // Standard Error: 63_386
            .saturating_add(Weight::from_ref_time(1_548_611).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(8))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: Staking UnappliedSlashes (r:1 w:1)
    // Proof Skipped: Staking UnappliedSlashes (max_values: None, max_size: None, mode: Measured)
    /// The range of component `s` is `[1, 1000]`.
    fn cancel_deferred_slash(s: u32) -> Weight {
        // Minimum execution time: 131_447 nanoseconds.
        Weight::from_ref_time(723_008_002)
            // Standard Error: 84_074
            .saturating_add(Weight::from_ref_time(2_626_167).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof Skipped: Staking CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Proof Skipped: Staking HistoryDepth (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Proof Skipped: Staking ErasValidatorReward (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Bonded (r:2049 w:0)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:1 w:1)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Proof Skipped: Staking ErasValidatorPrefs (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Payee (r:2049 w:0)
    // Proof Skipped: Staking Payee (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:2050 w:2050)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:4098 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity IsDidFrozen (r:2048 w:0)
    // Proof Skipped: Identity IsDidFrozen (max_values: None, max_size: None, mode: Measured)
    /// The range of component `n` is `[1, 2048]`.
    fn payout_stakers(n: u32) -> Weight {
        // Minimum execution time: 232_406 nanoseconds.
        Weight::from_ref_time(637_731_367)
            // Standard Error: 50_873
            .saturating_add(Weight::from_ref_time(44_899_232).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(15))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(n.into())))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof Skipped: Staking CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Proof Skipped: Staking HistoryDepth (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Proof Skipped: Staking ErasValidatorReward (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Bonded (r:2049 w:0)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:2049 w:2049)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Proof Skipped: Staking ErasValidatorPrefs (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Payee (r:2049 w:0)
    // Proof Skipped: Staking Payee (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:2050 w:2050)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:2049 w:2049)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:2050 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    /// The range of component `n` is `[1, 2048]`.
    fn payout_stakers_alive_controller(n: u32) -> Weight {
        // Minimum execution time: 241_764 nanoseconds.
        Weight::from_ref_time(735_065_515)
            // Standard Error: 64_047
            .saturating_add(Weight::from_ref_time(49_953_875).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(15))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(n.into())))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:1 w:1)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// The range of component `u` is `[0, 1000]`.
    /// The range of component `l` is `[1, 32]`.
    fn rebond(u: u32) -> Weight {
        // Minimum execution time: 29_204 nanoseconds.
        Weight::from_ref_time(27_604_248)
            // Standard Error: 1_123
            .saturating_add(Weight::from_ref_time(1_659).saturating_mul(u.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof Skipped: Staking CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking HistoryDepth (r:1 w:1)
    // Proof Skipped: Staking HistoryDepth (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking ErasStakers (r:101 w:101)
    // Proof Skipped: Staking ErasStakers (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasStakersClipped (r:101 w:101)
    // Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorPrefs (r:101 w:101)
    // Proof Skipped: Staking ErasValidatorPrefs (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorReward (r:0 w:100)
    // Proof Skipped: Staking ErasValidatorReward (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasRewardPoints (r:0 w:100)
    // Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasTotalStake (r:0 w:100)
    // Proof Skipped: Staking ErasTotalStake (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasStartSessionIndex (r:0 w:100)
    // Proof Skipped: Staking ErasStartSessionIndex (max_values: None, max_size: None, mode: Measured)
    /// The range of component `e` is `[1, 100]`.
    fn set_history_depth(e: u32) -> Weight {
        // Minimum execution time: 31_699 nanoseconds.
        Weight::from_ref_time(32_401_000)
            // Standard Error: 81_497
            .saturating_add(Weight::from_ref_time(21_241_794).saturating_mul(e.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().reads((3_u64).saturating_mul(e.into())))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((7_u64).saturating_mul(e.into())))
    }
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Staking Bonded (r:1 w:1)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking SlashingSpans (r:1 w:1)
    // Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:0 w:1)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:0 w:1)
    // Proof Skipped: Staking Validators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Payee (r:0 w:1)
    // Proof Skipped: Staking Payee (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Nominators (r:0 w:1)
    // Proof Skipped: Staking Nominators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking SpanSlash (r:0 w:100)
    // Proof Skipped: Staking SpanSlash (max_values: None, max_size: None, mode: Measured)
    /// The range of component `s` is `[1, 100]`.
    fn reap_stash(s: u32) -> Weight {
        // Minimum execution time: 41_367 nanoseconds.
        Weight::from_ref_time(44_791_825)
            // Standard Error: 61_322
            .saturating_add(Weight::from_ref_time(1_465_690).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(8))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: Staking CurrentEra (r:1 w:1)
    // Proof Skipped: Staking CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Proof Skipped: Staking HistoryDepth (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking QueuedElected (r:1 w:0)
    // Proof Skipped: Staking QueuedElected (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Validators (r:11 w:0)
    // Proof Skipped: Staking Validators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Bonded (r:110 w:0)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:110 w:0)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking MinimumBondThreshold (r:1 w:0)
    // Proof Skipped: Staking MinimumBondThreshold (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:110 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Proof Skipped: Instance2Group ActiveMembers (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Identity Claims (r:220 w:0)
    // Proof Skipped: Identity Claims (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking PermissionedIdentity (r:10 w:0)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Nominators (r:101 w:0)
    // Proof Skipped: Staking Nominators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking SlashingSpans (r:10 w:0)
    // Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking MinimumValidatorCount (r:1 w:0)
    // Proof Skipped: Staking MinimumValidatorCount (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Proof Skipped: Staking ValidatorCount (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking ErasStakersClipped (r:0 w:10)
    // Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorPrefs (r:0 w:10)
    // Proof Skipped: Staking ErasValidatorPrefs (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking SnapshotValidators (r:0 w:1)
    // Proof Skipped: Staking SnapshotValidators (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking ErasStakers (r:0 w:10)
    // Proof Skipped: Staking ErasStakers (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasTotalStake (r:0 w:1)
    // Proof Skipped: Staking ErasTotalStake (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking IsCurrentSessionFinal (r:0 w:1)
    // Proof Skipped: Staking IsCurrentSessionFinal (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking ErasStartSessionIndex (r:0 w:1)
    // Proof Skipped: Staking ErasStartSessionIndex (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking QueuedScore (r:0 w:1)
    // Proof Skipped: Staking QueuedScore (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking EraElectionStatus (r:0 w:1)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking SnapshotNominators (r:0 w:1)
    // Proof Skipped: Staking SnapshotNominators (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `v` is `[1, 10]`.
    /// The range of component `n` is `[1, 100]`.
    fn new_era(v: u32, n: u32) -> Weight {
        // Minimum execution time: 575_084 nanoseconds.
        Weight::from_ref_time(575_906_000)
            // Standard Error: 4_697_659
            .saturating_add(Weight::from_ref_time(89_461_564).saturating_mul(v.into()))
            // Standard Error: 482_537
            .saturating_add(Weight::from_ref_time(36_987_298).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(10))
            .saturating_add(DbWeight::get().reads((8_u64).saturating_mul(v.into())))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(8))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(v.into())))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof Skipped: Staking CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Proof Skipped: Staking HistoryDepth (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Proof Skipped: Staking ErasValidatorReward (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Bonded (r:110 w:0)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:110 w:110)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasStakersClipped (r:10 w:0)
    // Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorPrefs (r:10 w:0)
    // Proof Skipped: Staking ErasValidatorPrefs (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Payee (r:110 w:0)
    // Proof Skipped: Staking Payee (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:111 w:111)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:110 w:110)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:111 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    /// The range of component `v` is `[1, 10]`.
    /// The range of component `n` is `[1, 100]`.
    fn payout_all(v: u32, n: u32) -> Weight {
        // Minimum execution time: 898_459 nanoseconds.
        Weight::from_ref_time(899_731_000)
            // Standard Error: 51_247_510
            .saturating_add(Weight::from_ref_time(1_005_447_166).saturating_mul(v.into()))
            // Standard Error: 5_264_083
            .saturating_add(Weight::from_ref_time(154_675_046).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().reads((8_u64).saturating_mul(v.into())))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(1))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(v.into())))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(n.into())))
    }
    // Storage: Staking Bonded (r:1 w:0)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:1 w:1)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[1, 32]`.
    fn do_slash(l: u32) -> Weight {
        // Minimum execution time: 36_849 nanoseconds.
        Weight::from_ref_time(40_663_382)
            // Standard Error: 38_394
            .saturating_add(Weight::from_ref_time(7_643).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof Skipped: Staking CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking QueuedScore (r:1 w:1)
    // Proof Skipped: Staking QueuedScore (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking SnapshotValidators (r:1 w:0)
    // Proof Skipped: Staking SnapshotValidators (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Proof Skipped: Staking ValidatorCount (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking SnapshotNominators (r:1 w:0)
    // Proof Skipped: Staking SnapshotNominators (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking Validators (r:500 w:0)
    // Proof Skipped: Staking Validators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Nominators (r:500 w:0)
    // Proof Skipped: Staking Nominators (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking SlashingSpans (r:100 w:0)
    // Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Bonded (r:500 w:0)
    // Proof Skipped: Staking Bonded (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:500 w:0)
    // Proof Skipped: Staking Ledger (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking QueuedElected (r:0 w:1)
    // Proof Skipped: Staking QueuedElected (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `v` is `[1000, 2000]`.
    /// The range of component `n` is `[1000, 2000]`.
    /// The range of component `a` is `[200, 500]`.
    /// The range of component `w` is `[16, 100]`.
    fn submit_solution_better(v: u32, n: u32, a: u32, w: u32) -> Weight {
        // Minimum execution time: 8_156_707 nanoseconds.
        Weight::from_ref_time(8_209_156_000)
            // Standard Error: 93_923
            .saturating_add(Weight::from_ref_time(355_707).saturating_mul(v.into()))
            // Standard Error: 624_649
            .saturating_add(Weight::from_ref_time(1_817_605).saturating_mul(n.into()))
            // Standard Error: 172_840
            .saturating_add(Weight::from_ref_time(33_039_291).saturating_mul(a.into()))
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().reads((4_u64).saturating_mul(a.into())))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(w.into())))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Staking SlashingAllowedFor (r:0 w:1)
    // Proof Skipped: Staking SlashingAllowedFor (max_values: Some(1), max_size: None, mode: Measured)
    fn change_slashing_allowed_for() -> Weight {
        // Minimum execution time: 7_494 nanoseconds.
        Weight::from_ref_time(7_865_000).saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Proof Skipped: Staking ValidatorCount (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    fn update_permissioned_validator_intended_count() -> Weight {
        // Minimum execution time: 13_626 nanoseconds.
        Weight::from_ref_time(13_756_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ValidatorCount (r:1 w:1)
    // Proof Skipped: Staking ValidatorCount (max_values: Some(1), max_size: None, mode: Measured)
    fn increase_validator_count() -> Weight {
        // Minimum execution time: 9_919 nanoseconds.
        Weight::from_ref_time(10_219_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ValidatorCount (r:1 w:1)
    // Proof Skipped: Staking ValidatorCount (max_values: Some(1), max_size: None, mode: Measured)
    fn scale_validator_count() -> Weight {
        // Minimum execution time: 9_948 nanoseconds.
        Weight::from_ref_time(10_069_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Proof Skipped: Staking EraElectionStatus (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:100 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity IsDidFrozen (r:1 w:0)
    // Proof Skipped: Identity IsDidFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:100 w:100)
    // Proof Skipped: Staking Validators (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity AccountKeyRefCount (r:100 w:100)
    // Proof Skipped: Identity AccountKeyRefCount (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Nominators (r:0 w:100)
    // Proof Skipped: Staking Nominators (max_values: None, max_size: None, mode: Measured)
    /// The range of component `s` is `[1, 100]`.
    fn chill_from_governance(s: u32) -> Weight {
        // Minimum execution time: 42_960 nanoseconds.
        Weight::from_ref_time(43_351_000)
            // Standard Error: 42_572
            .saturating_add(Weight::from_ref_time(18_717_542).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().reads((3_u64).saturating_mul(s.into())))
            .saturating_add(DbWeight::get().writes(1))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(s.into())))
    }
}
