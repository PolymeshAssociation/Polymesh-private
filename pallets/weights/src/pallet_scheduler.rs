// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-06-06, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `trinity`, CPU: `AMD Ryzen 9 7950X 16-Core Processor`

// Executed Command:
// ./target/release/polymesh-private
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_scheduler
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// native
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_scheduler using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_scheduler::WeightInfo for SubstrateWeight {
    // Storage: Scheduler IncompleteSince (r:1 w:1)
    // Proof: Scheduler IncompleteSince (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn service_agendas_base() -> Weight {
        // Minimum execution time: 1_873 nanoseconds.
        Weight::from_ref_time(1_964_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    // Proof: Scheduler Agenda (max_values: None, max_size: Some(10463), added: 12938, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 50]`.
    fn service_agenda_base(s: u32) -> Weight {
        // Minimum execution time: 1_192 nanoseconds.
        Weight::from_ref_time(3_084_890)
            // Standard Error: 1_280
            .saturating_add(Weight::from_ref_time(159_612).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    fn service_task_base() -> Weight {
        // Minimum execution time: 1_323 nanoseconds.
        Weight::from_ref_time(1_373_000)
    }
    // Storage: Preimage PreimageFor (r:1 w:1)
    // Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: Measured)
    // Storage: Preimage StatusFor (r:1 w:1)
    // Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
    /// The range of component `s` is `[128, 4194304]`.
    fn service_task_fetched(s: u32) -> Weight {
        // Minimum execution time: 7_234 nanoseconds.
        Weight::from_ref_time(5_861_141)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(105).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Scheduler Lookup (r:0 w:1)
    // Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    fn service_task_named() -> Weight {
        // Minimum execution time: 1_503 nanoseconds.
        Weight::from_ref_time(1_613_000).saturating_add(DbWeight::get().writes(1))
    }
    fn service_task_periodic() -> Weight {
        // Minimum execution time: 1_203 nanoseconds.
        Weight::from_ref_time(1_262_000)
    }
    fn execute_dispatch_signed() -> Weight {
        // Minimum execution time: 621 nanoseconds.
        Weight::from_ref_time(661_000)
    }
    fn execute_dispatch_unsigned() -> Weight {
        // Minimum execution time: 592 nanoseconds.
        Weight::from_ref_time(661_000)
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    // Proof: Scheduler Agenda (max_values: None, max_size: Some(10463), added: 12938, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 49]`.
    fn schedule(s: u32) -> Weight {
        // Minimum execution time: 3_457 nanoseconds.
        Weight::from_ref_time(5_415_555)
            // Standard Error: 1_880
            .saturating_add(Weight::from_ref_time(168_325).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    // Proof: Scheduler Agenda (max_values: None, max_size: Some(10463), added: 12938, mode: MaxEncodedLen)
    // Storage: Scheduler Lookup (r:0 w:1)
    // Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 50]`.
    fn cancel(s: u32) -> Weight {
        // Minimum execution time: 5_740 nanoseconds.
        Weight::from_ref_time(5_929_375)
            // Standard Error: 1_529
            .saturating_add(Weight::from_ref_time(268_721).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Scheduler Lookup (r:1 w:1)
    // Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    // Storage: Scheduler Agenda (r:1 w:1)
    // Proof: Scheduler Agenda (max_values: None, max_size: Some(10463), added: 12938, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 49]`.
    fn schedule_named(s: u32) -> Weight {
        // Minimum execution time: 4_389 nanoseconds.
        Weight::from_ref_time(7_142_777)
            // Standard Error: 2_759
            .saturating_add(Weight::from_ref_time(181_124).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Scheduler Lookup (r:1 w:1)
    // Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    // Storage: Scheduler Agenda (r:1 w:1)
    // Proof: Scheduler Agenda (max_values: None, max_size: Some(10463), added: 12938, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 50]`.
    fn cancel_named(s: u32) -> Weight {
        // Minimum execution time: 6_652 nanoseconds.
        Weight::from_ref_time(7_335_094)
            // Standard Error: 1_628
            .saturating_add(Weight::from_ref_time(289_248).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(2))
    }
}
