// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_confidential_asset
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-11-16, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `Ubuntu-2204-jammy-amd64-base`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`

// Executed Command:
// ./polymesh-private
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=*
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./Polymesh-private/pallets/weights/src/
// --template
// ./Polymesh-private/.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_confidential_asset using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl crate::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    fn create_account() -> Weight {
        // Minimum execution time: 32_521 nanoseconds.
        Weight::from_ref_time(33_192_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: ConfidentialAsset Details (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity DidRecords (r:1 w:0)
    // Proof Skipped: Identity DidRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetAuditors (r:0 w:1)
    // Proof Skipped: ConfidentialAsset AssetAuditors (max_values: None, max_size: None, mode: Measured)
    fn create_asset() -> Weight {
        // Minimum execution time: 95_048 nanoseconds.
        Weight::from_ref_time(95_559_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    fn mint() -> Weight {
        // Minimum execution time: 288_732 nanoseconds.
        Weight::from_ref_time(289_633_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn burn() -> Weight {
        // Minimum execution time: 2_379_173 nanoseconds.
        Weight::from_ref_time(2_382_891_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetFrozen (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AssetFrozen (max_values: None, max_size: None, mode: Measured)
    fn set_asset_frozen() -> Weight {
        // Minimum execution time: 20_769 nanoseconds.
        Weight::from_ref_time(21_140_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountAssetFrozen (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountAssetFrozen (max_values: None, max_size: None, mode: Measured)
    fn set_account_asset_frozen() -> Weight {
        // Minimum execution time: 37_911 nanoseconds.
        Weight::from_ref_time(38_582_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IncomingBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset IncomingBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    fn apply_incoming_balance() -> Weight {
        // Minimum execution time: 58_039 nanoseconds.
        Weight::from_ref_time(110_307_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IncomingBalance (r:200 w:199)
    // Proof Skipped: ConfidentialAsset IncomingBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:199 w:199)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    /// The range of component `b` is `[0, 200]`.
    fn apply_incoming_balances(b: u32) -> Weight {
        // Minimum execution time: 31_859 nanoseconds.
        Weight::from_ref_time(76_071_357)
            // Standard Error: 99_012
            .saturating_add(Weight::from_ref_time(27_983_448).saturating_mul(b.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().reads((2_u64).saturating_mul(b.into())))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(b.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueCounter (r:1 w:1)
    // Proof Skipped: ConfidentialAsset VenueCounter (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueCreator (r:0 w:1)
    // Proof Skipped: ConfidentialAsset VenueCreator (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IdentityVenues (r:0 w:1)
    // Proof Skipped: ConfidentialAsset IdentityVenues (max_values: None, max_size: None, mode: Measured)
    fn create_venue() -> Weight {
        // Minimum execution time: 31_268 nanoseconds.
        Weight::from_ref_time(32_562_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueFiltering (r:0 w:1)
    // Proof Skipped: ConfidentialAsset VenueFiltering (max_values: None, max_size: None, mode: Measured)
    fn set_venue_filtering() -> Weight {
        // Minimum execution time: 21_290 nanoseconds.
        Weight::from_ref_time(21_401_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueAllowList (r:0 w:99)
    // Proof Skipped: ConfidentialAsset VenueAllowList (max_values: None, max_size: None, mode: Measured)
    /// The range of component `v` is `[0, 100]`.
    fn allow_venues(v: u32) -> Weight {
        // Minimum execution time: 20_519 nanoseconds.
        Weight::from_ref_time(19_741_838)
            // Standard Error: 4_362
            .saturating_add(Weight::from_ref_time(1_782_183).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(v.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueAllowList (r:0 w:99)
    // Proof Skipped: ConfidentialAsset VenueAllowList (max_values: None, max_size: None, mode: Measured)
    /// The range of component `v` is `[0, 100]`.
    fn disallow_venues(v: u32) -> Weight {
        // Minimum execution time: 19_827 nanoseconds.
        Weight::from_ref_time(16_919_858)
            // Standard Error: 5_923
            .saturating_add(Weight::from_ref_time(1_652_254).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(v.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueCreator (r:1 w:0)
    // Proof Skipped: ConfidentialAsset VenueCreator (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionCounter (r:1 w:1)
    // Proof Skipped: ConfidentialAsset TransactionCounter (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueFiltering (r:100 w:0)
    // Proof Skipped: ConfidentialAsset VenueFiltering (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetFrozen (r:100 w:0)
    // Proof Skipped: ConfidentialAsset AssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetAuditors (r:100 w:0)
    // Proof Skipped: ConfidentialAsset AssetAuditors (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountAssetFrozen (r:100 w:0)
    // Proof Skipped: ConfidentialAsset AccountAssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:200 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:0 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TransactionStatuses (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:0 w:999)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:0 w:100)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueTransactions (r:0 w:1)
    // Proof Skipped: ConfidentialAsset VenueTransactions (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Transactions (r:0 w:1)
    // Proof Skipped: ConfidentialAsset Transactions (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionPartyCount (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TransactionPartyCount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionParties (r:0 w:1000)
    // Proof Skipped: ConfidentialAsset TransactionParties (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[1, 100]`.
    /// The range of component `m` is `[0, 800]`.
    fn add_transaction(l: u32, m: u32) -> Weight {
        // Minimum execution time: 264_326 nanoseconds.
        Weight::from_ref_time(264_497_000)
            // Standard Error: 475_442
            .saturating_add(Weight::from_ref_time(186_748_294).saturating_mul(l.into()))
            // Standard Error: 59_519
            .saturating_add(Weight::from_ref_time(1_805_360).saturating_mul(m.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(28))
            .saturating_add(DbWeight::get().writes((11_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(m.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    /// The range of component `a` is `[0, 8]`.
    fn sender_affirm_transaction(a: u32) -> Weight {
        // Minimum execution time: 212_038 nanoseconds.
        Weight::from_ref_time(202_410_100)
            // Standard Error: 410_810
            .saturating_add(Weight::from_ref_time(33_922_199).saturating_mul(a.into()))
            .saturating_add(DbWeight::get().reads(9))
            .saturating_add(DbWeight::get().writes(5))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1000 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1000 w:1000)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:0 w:1000)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[1, 1000]`.
    fn sender_affirm_transaction_batch(l: u32) -> Weight {
        // Minimum execution time: 5_581_784 nanoseconds.
        Weight::from_ref_time(1_073_005_113)
            // Standard Error: 1_019_506
            .saturating_add(Weight::from_ref_time(810_851_506).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().reads((2_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(3))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(l.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    fn receiver_affirm_transaction() -> Weight {
        // Minimum execution time: 220_744 nanoseconds.
        Weight::from_ref_time(225_182_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    fn mediator_affirm_transaction() -> Weight {
        // Minimum execution time: 212_168 nanoseconds.
        Weight::from_ref_time(275_086_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Transactions (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Transactions (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionParties (r:10001 w:10001)
    // Proof Skipped: ConfidentialAsset TransactionParties (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1001 w:1000)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:2000 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:10000 w:10000)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:1000 w:1000)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetFrozen (r:1000 w:0)
    // Proof Skipped: ConfidentialAsset AssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountAssetFrozen (r:1000 w:0)
    // Proof Skipped: ConfidentialAsset AccountAssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IncomingBalance (r:1000 w:1000)
    // Proof Skipped: ConfidentialAsset IncomingBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionPartyCount (r:1 w:1)
    // Proof Skipped: ConfidentialAsset TransactionPartyCount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TransactionStatuses (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[1, 1000]`.
    fn execute_transaction(l: u32) -> Weight {
        // Minimum execution time: 304_091 nanoseconds.
        Weight::from_ref_time(304_341_000)
            // Standard Error: 343_813
            .saturating_add(Weight::from_ref_time(255_963_433).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().reads((27_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(5))
            .saturating_add(DbWeight::get().writes((23_u64).saturating_mul(l.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionParties (r:10001 w:10001)
    // Proof Skipped: ConfidentialAsset TransactionParties (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1001 w:1000)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Transactions (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Transactions (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:2000 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:1000 w:1000)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IncomingBalance (r:1000 w:1000)
    // Proof Skipped: ConfidentialAsset IncomingBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionPartyCount (r:1 w:1)
    // Proof Skipped: ConfidentialAsset TransactionPartyCount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:0 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TransactionStatuses (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:0 w:10000)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[1, 1000]`.
    fn reject_transaction(l: u32) -> Weight {
        // Minimum execution time: 246_993 nanoseconds.
        Weight::from_ref_time(251_221_000)
            // Standard Error: 622_920
            .saturating_add(Weight::from_ref_time(223_024_425).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().reads((15_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(5))
            .saturating_add(DbWeight::get().writes((23_u64).saturating_mul(l.into())))
    }
    fn batch_verify_sender_proofs() -> Weight {
        // Minimum execution time: 8_083_006 nanoseconds.
        Weight::from_ref_time(8_242_937_000)
    }
    /// The range of component `p` is `[0, 256]`.
    fn verify_sender_proofs(p: u32) -> Weight {
        // Minimum execution time: 802 nanoseconds.
        Weight::from_ref_time(3_671_159_806)
            // Standard Error: 1_061_212
            .saturating_add(Weight::from_ref_time(572_278_526).saturating_mul(p.into()))
    }
    /// The range of component `a` is `[0, 100]`.
    fn verify_one_sender_proof(a: u32) -> Weight {
        // Minimum execution time: 4_307_954 nanoseconds.
        Weight::from_ref_time(4_756_878_674)
            // Standard Error: 463_425
            .saturating_add(Weight::from_ref_time(764_731).saturating_mul(a.into()))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: ConfidentialAsset AccountDid (r:4000 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    /// The range of component `m` is `[0, 2000]`.
    fn move_assets_no_assets(m: u32) -> Weight {
        // Minimum execution time: 18_665 nanoseconds.
        Weight::from_ref_time(1_877_499_876)
            // Standard Error: 214_750
            .saturating_add(Weight::from_ref_time(41_197_499).saturating_mul(m.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().reads((2_u64).saturating_mul(m.into())))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: ConfidentialAsset AccountDid (r:2 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetFrozen (r:2000 w:0)
    // Proof Skipped: ConfidentialAsset AssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetAuditors (r:2000 w:0)
    // Proof Skipped: ConfidentialAsset AssetAuditors (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountAssetFrozen (r:2000 w:0)
    // Proof Skipped: ConfidentialAsset AccountAssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:4000 w:4000)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    /// The range of component `a` is `[0, 2000]`.
    fn move_assets_one_batch(a: u32) -> Weight {
        // Minimum execution time: 58_960 nanoseconds.
        Weight::from_ref_time(7_073_289_756)
            // Standard Error: 1_528_715
            .saturating_add(Weight::from_ref_time(285_468_289).saturating_mul(a.into()))
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().reads((5_u64).saturating_mul(a.into())))
            .saturating_add(DbWeight::get().writes(1))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(a.into())))
    }
    fn elgamal_wasm() -> Weight {
        // Minimum execution time: 198_522 nanoseconds.
        Weight::from_ref_time(198_903_000)
    }
    fn elgamal_host() -> Weight {
        // Minimum execution time: 37_160 nanoseconds.
        Weight::from_ref_time(37_470_000)
    }
}
