// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_confidential_asset
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-25, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `trinity`, CPU: `AMD Ryzen 9 7950X 16-Core Processor`

// Executed Command:
// ./target/release/polymesh-private
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_confidential_asset
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/confidential-asset/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_confidential_asset using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl crate::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    fn create_account() -> Weight {
        // Minimum execution time: 32_010 nanoseconds.
        Weight::from_ref_time(32_361_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: ConfidentialAsset Details (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity DidRecords (r:1 w:0)
    // Proof Skipped: Identity DidRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetAuditors (r:0 w:1)
    // Proof Skipped: ConfidentialAsset AssetAuditors (max_values: None, max_size: None, mode: Measured)
    fn create_asset() -> Weight {
        // Minimum execution time: 94_367 nanoseconds.
        Weight::from_ref_time(94_727_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    fn mint() -> Weight {
        // Minimum execution time: 291_526 nanoseconds.
        Weight::from_ref_time(293_389_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn burn() -> Weight {
        // Minimum execution time: 1_648_784 nanoseconds.
        Weight::from_ref_time(1_651_640_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetFrozen (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AssetFrozen (max_values: None, max_size: None, mode: Measured)
    fn set_asset_frozen() -> Weight {
        // Minimum execution time: 20_920 nanoseconds.
        Weight::from_ref_time(21_520_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountAssetFrozen (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountAssetFrozen (max_values: None, max_size: None, mode: Measured)
    fn set_account_asset_frozen() -> Weight {
        // Minimum execution time: 38_222 nanoseconds.
        Weight::from_ref_time(39_354_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IncomingBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset IncomingBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    fn apply_incoming_balance() -> Weight {
        // Minimum execution time: 121_257 nanoseconds.
        Weight::from_ref_time(122_129_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IncomingBalance (r:200 w:199)
    // Proof Skipped: ConfidentialAsset IncomingBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:199 w:199)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    /// The range of component `b` is `[0, 200]`.
    fn apply_incoming_balances(b: u32) -> Weight {
        // Minimum execution time: 33_423 nanoseconds.
        Weight::from_ref_time(47_328_490)
            // Standard Error: 26_951
            .saturating_add(Weight::from_ref_time(90_115_063).saturating_mul(b.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().reads((2_u64).saturating_mul(b.into())))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(b.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueCounter (r:1 w:1)
    // Proof Skipped: ConfidentialAsset VenueCounter (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueCreator (r:0 w:1)
    // Proof Skipped: ConfidentialAsset VenueCreator (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IdentityVenues (r:0 w:1)
    // Proof Skipped: ConfidentialAsset IdentityVenues (max_values: None, max_size: None, mode: Measured)
    fn create_venue() -> Weight {
        // Minimum execution time: 17_382 nanoseconds.
        Weight::from_ref_time(18_064_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueFiltering (r:0 w:1)
    // Proof Skipped: ConfidentialAsset VenueFiltering (max_values: None, max_size: None, mode: Measured)
    fn set_venue_filtering() -> Weight {
        // Minimum execution time: 19_636 nanoseconds.
        Weight::from_ref_time(19_928_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueAllowList (r:0 w:99)
    // Proof Skipped: ConfidentialAsset VenueAllowList (max_values: None, max_size: None, mode: Measured)
    /// The range of component `v` is `[0, 100]`.
    fn allow_venues(v: u32) -> Weight {
        // Minimum execution time: 18_434 nanoseconds.
        Weight::from_ref_time(18_172_905)
            // Standard Error: 4_920
            .saturating_add(Weight::from_ref_time(1_681_063).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(v.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueAllowList (r:0 w:99)
    // Proof Skipped: ConfidentialAsset VenueAllowList (max_values: None, max_size: None, mode: Measured)
    /// The range of component `v` is `[0, 100]`.
    fn disallow_venues(v: u32) -> Weight {
        // Minimum execution time: 18_444 nanoseconds.
        Weight::from_ref_time(18_803_933)
            // Standard Error: 4_729
            .saturating_add(Weight::from_ref_time(1_602_861).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(v.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueCreator (r:1 w:0)
    // Proof Skipped: ConfidentialAsset VenueCreator (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionCounter (r:1 w:1)
    // Proof Skipped: ConfidentialAsset TransactionCounter (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueFiltering (r:100 w:0)
    // Proof Skipped: ConfidentialAsset VenueFiltering (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetFrozen (r:100 w:0)
    // Proof Skipped: ConfidentialAsset AssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetAuditors (r:100 w:0)
    // Proof Skipped: ConfidentialAsset AssetAuditors (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountAssetFrozen (r:100 w:0)
    // Proof Skipped: ConfidentialAsset AccountAssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:200 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:0 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TransactionStatuses (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:0 w:999)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:0 w:100)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueTransactions (r:0 w:1)
    // Proof Skipped: ConfidentialAsset VenueTransactions (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Transactions (r:0 w:1)
    // Proof Skipped: ConfidentialAsset Transactions (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionPartyCount (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TransactionPartyCount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionParties (r:0 w:1000)
    // Proof Skipped: ConfidentialAsset TransactionParties (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[1, 100]`.
    /// The range of component `m` is `[0, 800]`.
    fn add_transaction(l: u32, m: u32) -> Weight {
        // Minimum execution time: 252_362 nanoseconds.
        Weight::from_ref_time(253_054_000)
            // Standard Error: 515_055
            .saturating_add(Weight::from_ref_time(197_164_994).saturating_mul(l.into()))
            // Standard Error: 64_478
            .saturating_add(Weight::from_ref_time(1_224_895).saturating_mul(m.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(28))
            .saturating_add(DbWeight::get().writes((11_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(m.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    /// The range of component `a` is `[0, 8]`.
    fn sender_affirm_transaction(a: u32) -> Weight {
        // Minimum execution time: 2_494_324 nanoseconds.
        Weight::from_ref_time(2_706_499_140)
            // Standard Error: 2_015_802
            .saturating_add(Weight::from_ref_time(75_166_366).saturating_mul(a.into()))
            .saturating_add(DbWeight::get().reads(9))
            .saturating_add(DbWeight::get().writes(5))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1000 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1000 w:1000)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:0 w:1000)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[1, 1000]`.
    fn sender_affirm_transaction_batch(l: u32) -> Weight {
        // Minimum execution time: 3_006_823 nanoseconds.
        Weight::from_ref_time(2_088_006_816)
            // Standard Error: 311_066
            .saturating_add(Weight::from_ref_time(508_131_140).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().reads((2_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(3))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(l.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    fn receiver_affirm_transaction() -> Weight {
        // Minimum execution time: 198_541 nanoseconds.
        Weight::from_ref_time(204_312_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    fn mediator_affirm_transaction() -> Weight {
        // Minimum execution time: 192_820 nanoseconds.
        Weight::from_ref_time(193_582_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Transactions (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Transactions (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionParties (r:10001 w:10001)
    // Proof Skipped: ConfidentialAsset TransactionParties (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1001 w:1000)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:2000 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:10000 w:10000)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:1000 w:1000)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetFrozen (r:1000 w:0)
    // Proof Skipped: ConfidentialAsset AssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountAssetFrozen (r:1000 w:0)
    // Proof Skipped: ConfidentialAsset AccountAssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IncomingBalance (r:1000 w:1000)
    // Proof Skipped: ConfidentialAsset IncomingBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionPartyCount (r:1 w:1)
    // Proof Skipped: ConfidentialAsset TransactionPartyCount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TransactionStatuses (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[1, 1000]`.
    fn execute_transaction(l: u32) -> Weight {
        // Minimum execution time: 371_886 nanoseconds.
        Weight::from_ref_time(374_971_000)
            // Standard Error: 292_167
            .saturating_add(Weight::from_ref_time(358_965_565).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().reads((27_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(5))
            .saturating_add(DbWeight::get().writes((23_u64).saturating_mul(l.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionParties (r:10001 w:10001)
    // Proof Skipped: ConfidentialAsset TransactionParties (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1001 w:1000)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Transactions (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Transactions (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:2000 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegStates (r:1000 w:1000)
    // Proof Skipped: ConfidentialAsset TxLegStates (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IncomingBalance (r:1000 w:1000)
    // Proof Skipped: ConfidentialAsset IncomingBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionPartyCount (r:1 w:1)
    // Proof Skipped: ConfidentialAsset TransactionPartyCount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:0 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TransactionStatuses (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:0 w:10000)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[1, 1000]`.
    fn reject_transaction(l: u32) -> Weight {
        // Minimum execution time: 337_591 nanoseconds.
        Weight::from_ref_time(343_923_000)
            // Standard Error: 168_345
            .saturating_add(Weight::from_ref_time(310_225_017).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().reads((15_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(5))
            .saturating_add(DbWeight::get().writes((23_u64).saturating_mul(l.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:4000 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    /// The range of component `m` is `[0, 2000]`.
    fn move_assets_no_assets(m: u32) -> Weight {
        // Minimum execution time: 9_948 nanoseconds.
        Weight::from_ref_time(10_259_000)
            // Standard Error: 12_677
            .saturating_add(Weight::from_ref_time(41_417_411).saturating_mul(m.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().reads((2_u64).saturating_mul(m.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountDid (r:2 w:0)
    // Proof Skipped: ConfidentialAsset AccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetFrozen (r:2000 w:0)
    // Proof Skipped: ConfidentialAsset AssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AssetAuditors (r:2000 w:0)
    // Proof Skipped: ConfidentialAsset AssetAuditors (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountAssetFrozen (r:2000 w:0)
    // Proof Skipped: ConfidentialAsset AccountAssetFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset AccountBalance (r:4000 w:4000)
    // Proof Skipped: ConfidentialAsset AccountBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 2000]`.
    fn move_assets_one_batch(a: u32) -> Weight {
        // Minimum execution time: 52_728 nanoseconds.
        Weight::from_ref_time(1_940_498_873)
            // Standard Error: 139_308
            .saturating_add(Weight::from_ref_time(418_128_286).saturating_mul(a.into()))
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().reads((5_u64).saturating_mul(a.into())))
            .saturating_add(DbWeight::get().writes(1))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(a.into())))
    }
}
